// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var currencies = Currencies.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Currencies
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("humanType")]
        public HumanType HumanType { get; set; }

        [JsonProperty("txFee")]
        public string TxFee { get; set; }

        [JsonProperty("minConf")]
        public long MinConf { get; set; }

        [JsonProperty("depositAddress")]
        public string DepositAddress { get; set; }

        [JsonProperty("disabled")]
        public long Disabled { get; set; }

        [JsonProperty("delisted")]
        public long Delisted { get; set; }

        [JsonProperty("frozen")]
        public long Frozen { get; set; }
    }

    public enum HumanType { BtcClone, PaymentId, SweepToMainAccount };

    public partial class Currencies
    {
        public static Dictionary<string, Currencies> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, Currencies>>(json, QuickType.Converter2.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Dictionary<string, Currencies> self) => JsonConvert.SerializeObject(self, QuickType.Converter2.Settings);
    }

    internal static class Converter2
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                HumanTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class HumanTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(HumanType) || t == typeof(HumanType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "BTC Clone":
                    return HumanType.BtcClone;
                case "Payment ID":
                    return HumanType.PaymentId;
                case "Sweep to Main Account":
                    return HumanType.SweepToMainAccount;
            }
            throw new Exception("Cannot unmarshal type HumanType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (HumanType)untypedValue;
            switch (value)
            {
                case HumanType.BtcClone:
                    serializer.Serialize(writer, "BTC Clone");
                    return;
                case HumanType.PaymentId:
                    serializer.Serialize(writer, "Payment ID");
                    return;
                case HumanType.SweepToMainAccount:
                    serializer.Serialize(writer, "Sweep to Main Account");
                    return;
            }
            throw new Exception("Cannot marshal type HumanType");
        }

        public static readonly HumanTypeConverter Singleton = new HumanTypeConverter();
    }
}
